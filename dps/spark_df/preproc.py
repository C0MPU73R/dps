"""
Implement a preprocessing pipeline for Spark DataFrames as a Pandas UDF
"""

import random

import numpy as np
import pandas as pd

from pyspark.sql.types import StructType, StructField, StringType

from typing import Dict, Iterator

from .udf.langfilter import LangFilter
from .utils import logging as logging


class UdfPreprocessor:
    """
    The main UDF object. Acts as a Callable, so it can be added as a
    Pandas UDF by using it in mapInPandas
    """

    def __init__(self, config: Dict, seed: int = None, logconfig: Dict = None):
        """
        Store configuration.
        Delay instantiating objects until call time, so that they are
        created in executors
        """
        # Store config
        self.config = config
        self.logconfig = logconfig
        self.seed = seed
        # Delay initialization until use
        self.init = False


    def schema(self, schema_in: StructType) -> StructType:
        """
        Return the DataFrame schema that will be generated by this UDF
        """
        fields = schema_in.fields
        if "langfilter" in self.config:
            fields = fields + [StructField("detectedLang", StringType(), True)]
        return StructType(fields)


    def _init_obj(self):
        """
        Initialize the object
        """
        # Logging
        if self.logconfig:
            logging.basicConfig(**self.logconfig)
            logging.getLogger("py4j").setLevel(logging.ERROR)
            logging.getLogger("py4j.java_gateway").setLevel(logging.ERROR)

        self.logger = logging.getLogger(__name__)
        self.logger.info("preproc init")

        # Set the random seed, if given
        if self.seed:
            random.seed(self.seed)
            np.random.seed(self.seed)

        # Initalize modules
        if "langfilter" in self.config:
            self.logger.info("preproc init: langfilter")
            self.langfilter = LangFilter(self.config["langfilter"])

        # Mark as initialized
        self.init = True


    def __call__(self, dfl: Iterator[pd.DataFrame]) -> Iterator[pd.DataFrame]:
        """
        The UDF entry point. Do the processing.
        If necessary, initialize objects
        """
        # Initialize upon first call
        if not self.init:
            self._init_obj()

        # Process all DataFrames
        for df in dfl:
            try:
                self.logger.debug("UDF %d", len(df))

                # Apply language filter
                if "langfilter" in self.config:
                    df = self.langfilter(df)

                yield df

            except Exception as e:
                self.logger.error("Error in UDF: %s", e)
